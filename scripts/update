#!/usr/bin/env bash
set -e -o errexit -o nounset -o pipefail

declare project_root="${PWD}"
command -v git &>/dev/null && project_root=$(git rev-parse --show-toplevel)

# shellcheck source=lib/shared.sh
source "${project_root}/scripts/lib/shared.sh"

# shellcheck source=../.env
source "${project_root}/.env"

# pixelfed/pixelfed branch/tag
pixelfed_release="$1"

# jippi/docker-pixelfed branch/tag
docker_release="${2-main}"

action_start_newline "fetching docker updates"
git fetch origin || action_error_exit "failed"
action_ok "OK"
echo

action_start_newline "changing to release branch [${docker_release}]"
git checkout "${docker_release}" || action_error_exit "could not checkout branch ${docker_release}"
action_ok "OK"
echo

action_start_newline "pulling updates from remote branch [${docker_release}]"
git pull || action_error_exit "could not update branch ${docker_release}"
action_ok "OK"
echo

action_start_newline "update .env file (via dottie)"
scripts/dottie update || action_error_exit "could not update .env file"
action_ok "OK"
echo

action_start_newline "Updating 'DOCKER_APP_RELEASE' in '.env' file (via dottie)"
scripts/dottie set DOCKER_APP_RELEASE="${pixelfed_release}" || action_error_exit "could not update DOCKER_APP_RELEASE"
action_ok "OK"
echo

# Check if the [compose.override.yaml] file exist, or copy the example file
if [[ ! -f "${project_root}/compose.override.yaml" ]]; then
    action_start_newline "No 'compose.override.yaml' file found, copying the default one for you"
    cp -v "${project_root}/compose.override.yaml.example" "${project_root}/compose.override.yaml" || action_error_exit "copy operation failed"
    action_ok "OK"
    echo
fi

action_start_newline "pulling new Docker images"
docker compose pull || action_error_exit "could not pull docker images"
action_ok "OK"
echo

# Stopping worker/cron containers first, since they can take the longest to turn off
action_start_newline "stopping worker/cron docker services"
docker compose down worker cron || action_error_exit "could not stop docker containers"
action_ok "OK"

# Stopping 'web' for itself since its usually pretty fast at shutting down
# minimizing downtime while upgrading
action_start_newline "stopping web docker services"
docker compose down web || action_error_exit "could not stop docker containers"
action_ok "OK"

action_start_newline "clearing cache"
"${project_root}/scripts/clear-cache" || action_error_exit "could not clear cache"
action_ok "OK"

action_start_newline "starting docker services"
docker compose up -d || action_error_exit "could not start docker containers"
action_ok "OK"
